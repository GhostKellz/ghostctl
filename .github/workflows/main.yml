name: GhostCTL CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: self-hosted
    strategy:
      matrix:
        rust: [stable, beta]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy, rustfmt

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ghostctl/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check Formatting
        run: cargo fmt --check --manifest-path ghostctl/Cargo.toml

      - name: Lint with Clippy
        run: cargo clippy --manifest-path ghostctl/Cargo.toml --all-targets --all-features -- -D warnings

      - name: Run Tests
        run: cargo test --manifest-path ghostctl/Cargo.toml --verbose

      - name: Build Debug
        run: cargo build --manifest-path ghostctl/Cargo.toml

      - name: Test Basic Functionality
        run: |
          cd ghostctl
          ./target/debug/ghostctl version
          ./target/debug/ghostctl --help
          timeout 5s ./target/debug/ghostctl || true  # Test interactive menu with timeout

  security:
    name: Security Audit
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Security Audit
        uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build-artifacts:
    name: Build Release Artifacts
    needs: [test, security]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Cross-Compilation Tools
        run: |
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            sudo pacman -S --noconfirm musl
          fi
          if [[ "${{ matrix.target }}" == "aarch64"* ]]; then
            sudo pacman -S --noconfirm aarch64-linux-gnu-gcc
          fi

      - name: Install Cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build Release Binary
        run: |
          cd ghostctl
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]]; then
            cargo build --release --target ${{ matrix.target }}
          else
            cross build --release --target ${{ matrix.target }}
          fi

      - name: Test Binary Functionality
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          cd ghostctl
          ./target/${{ matrix.target }}/release/ghostctl version
          ./target/${{ matrix.target }}/release/ghostctl --help

      - name: Create Archive
        run: |
          cd ghostctl/target/${{ matrix.target }}/release
          tar -czf ghostctl-${{ github.ref_name }}-${{ matrix.target }}.tar.gz ghostctl
          mv ghostctl-${{ github.ref_name }}-${{ matrix.target }}.tar.gz ../../../../

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ghostctl-${{ matrix.target }}
          path: ghostctl-${{ github.ref_name }}-${{ matrix.target }}.tar.gz
          retention-days: 30

  create-release:
    name: Create GitHub Release
    needs: build-artifacts
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: Prepare Release Assets
        run: |
          mkdir -p release-assets
          find . -name "ghostctl-*.tar.gz" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/ghostctl-*.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: false
          body: |
            ## ðŸš€ GhostCTL ${{ github.ref_name }}
            
            ### Installation
            
            #### Universal Installer (Recommended)
            ```bash
            curl -sSL https://raw.githubusercontent.com/ghostkellz/ghostctl/main/install/install.sh | bash
            ```
            
            #### Manual Download
            Download the appropriate binary for your platform from the assets below.
            
            #### Arch Linux (AUR)
            ```bash
            yay -S ghostctl
            ```
            
            ### What's Changed
            See the full changelog in the release notes below.
            
            ### Quick Start
            ```bash
            ghostctl version          # Show version
            ghostctl --help          # Show help
            ghostctl                 # Interactive menu
            ghostctl dev menu        # Development tools
            ghostctl docker menu     # Docker management
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-aur:
    name: Deploy to AUR
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted
    steps:
      - name: Checkout AUR Repository
        uses: actions/checkout@v4
        with:
          repository: ghostkellz/aur-ghostctl
          token: ${{ secrets.GITHUB_TOKEN }}
          path: aur-repo

      - name: Update PKGBUILD
        run: |
          cd aur-repo
          # Update version and checksums
          sed -i "s/pkgver=.*/pkgver=${GITHUB_REF_NAME#v}/" PKGBUILD
          # Download source and update checksums
          makepkg --printsrcinfo > .SRCINFO
          
      - name: Validate PKGBUILD
        run: |
          cd aur-repo
          namcap PKGBUILD || true  # Don't fail on warnings

      - name: Commit and Push
        run: |
          cd aur-repo
          git config user.name "GhostCTL Bot"
          git config user.email "ghost@cktechx.com"
          git add .
          git commit -m "Update to ${GITHUB_REF_NAME}" || exit 0
          # git push  # Uncomment when SSH key is properly configured

  test-install:
    name: Test Installation
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted
    steps:
      - name: Test Universal Installer
        run: |
          # Test the installer script
          curl -sSL https://raw.githubusercontent.com/ghostkellz/ghostctl/${{ github.ref_name }}/install/install.sh > test-install.sh
          chmod +x test-install.sh
          ./test-install.sh --version ${{ github.ref_name }} --install-dir /tmp/ghostctl-test
          
          # Test the installed binary
          /tmp/ghostctl-test/ghostctl version
          /tmp/ghostctl-test/ghostctl --help
          
          # Cleanup
          rm -f test-install.sh
          rm -rf /tmp/ghostctl-test

  benchmark:
    name: Performance Benchmarks
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run Benchmarks
        run: |
          cd ghostctl
          cargo bench --no-run
          # Add custom benchmark scripts here

      - name: Store Benchmark Results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: ghostctl/target/criterion/benchmarks.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  docker-build:
    name: Build Docker Images
    needs: test
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          cd ghostctl
          docker build -t ghostctl:latest .
          docker tag ghostctl:latest ghcr.io/ghostkellz/ghostctl:latest
          
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            docker tag ghostctl:latest ghcr.io/ghostkellz/ghostctl:${GITHUB_REF_NAME}
          fi

      - name: Push to Registry
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/ghostkellz/ghostctl:latest
          
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            docker push ghcr.io/ghostkellz/ghostctl:${GITHUB_REF_NAME}
          fi
