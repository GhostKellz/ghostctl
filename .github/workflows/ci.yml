name: CI/CD

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test and Build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            ghostctl/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cd ghostctl && cargo fmt --check

      - name: Run clippy
        run: cd ghostctl && cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cd ghostctl && cargo test

      - name: Build release
        run: cd ghostctl && cargo build --release

      - name: Test binary
        run: |
          cd ghostctl
          ./target/release/ghostctl version
          ./target/release/ghostctl --help

  release:
    name: Create Release
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo pacman -S --noconfirm musl

      - name: Build release
        run: cd ghostctl && cargo build --release --target ${{ matrix.target }}

      - name: Create archive
        run: |
          cd ghostctl/target/${{ matrix.target }}/release
          tar -czf ghostctl-${{ github.ref_name }}-${{ matrix.target }}.tar.gz ghostctl
          mv ghostctl-${{ github.ref_name }}-${{ matrix.target }}.tar.gz ../../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ghostctl-${{ matrix.target }}
          path: ghostctl-${{ github.ref_name }}-${{ matrix.target }}.tar.gz

  github-release:
    name: GitHub Release
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ghostctl-x86_64-unknown-linux-gnu/ghostctl-${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz
            ghostctl-x86_64-unknown-linux-musl/ghostctl-${{ github.ref_name }}-x86_64-unknown-linux-musl.tar.gz
          generate_release_notes: true
          body: |
            ## GhostCTL ${{ github.ref_name }}
            
            ### Installation
            ```bash
            # Download and extract
            curl -L https://github.com/ghostkellz/ghostctl/releases/download/${{ github.ref_name }}/ghostctl-${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz | tar xz
            sudo mv ghostctl /usr/local/bin/
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}