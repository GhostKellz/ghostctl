name: CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ghostctl/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cd ghostctl && cargo fmt --check
    
    - name: Run clippy
      run: cd ghostctl && cargo clippy -- -D warnings
    
    - name: Run tests
      run: cd ghostctl && cargo test

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: ghostctl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: ghostctl.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: ghostctl
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ghostctl/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release
      run: cd ghostctl && cargo build --release --target ${{ matrix.target }}
    
    - name: Create artifact
      run: |
        mkdir -p artifacts
        cp ghostctl/target/${{ matrix.target }}/release/${{ matrix.binary }} artifacts/
        cd artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a ghostctl-${{ matrix.target }}.zip ${{ matrix.binary }}
        else
          tar czf ghostctl-${{ matrix.target }}.tar.gz ${{ matrix.binary }}
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ghostctl-${{ matrix.target }}
        path: artifacts/ghostctl-${{ matrix.target }}.*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}